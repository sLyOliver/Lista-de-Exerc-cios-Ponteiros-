Existem várias maneiras de medir o tempo de execução de rotinas computacionais em C. Uma das maneiras mais simples é usar a função clock() da biblioteca padrão time.h. A função clock() retorna o número de ciclos de clock desde o início do programa. Para obter o tempo de execução de uma rotina, basta medir o número de ciclos antes e depois da execução da rotina e calcular a diferença.

Aqui está um exemplo de como usar a função clock() para medir o tempo de execução da função my_sort() implementada anteriormente:

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int values[] = { 5, 2, 8, 3, 1, 6 };
    size_t num_elems = sizeof(values) / sizeof(int);

    // Mede o tempo de execução da função my_sort()
    clock_t start_time = clock();
    my_sort(values, num_elems, sizeof(int), cmpfunc);
    clock_t end_time = clock();

    double elapsed_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;

    printf("Valores em ordem crescente:\n");
    for (size_t i = 0; i < num_elems; i++) {
        printf("%d ", values[i]);
    }
    printf("\n");

    printf("Tempo de execução: %.6f segundos\n", elapsed_time);

    return 0;
}

Aqui, a função clock() é usada para medir o tempo de execução da função my_sort(). A diferença entre o tempo no início e no final da execução da função é calculada e convertida para segundos usando a constante CLOCKS_PER_SEC. O resultado é impresso na tela junto com o vetor ordenado.

Para medir o tempo de execução da função qsort(), podemos usar a mesma abordagem:

int main() {
    int values[] = { 5, 2, 8, 3, 1, 6 };
    size_t num_elems = sizeof(values) / sizeof(int);

    // Mede o tempo de execução da função qsort()
    clock_t start_time = clock();
    qsort(values, num_elems, sizeof(int), cmpfunc);
    clock_t end_time = clock();

    double elapsed_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;

    printf("Valores em ordem crescente:\n");
    for (size_t i = 0; i < num_elems; i++) {
        printf("%d ", values[i]);
    }
    printf("\n");

    printf("Tempo de execução: %.6f segundos\n", elapsed_time);

    return 0;
}


Comparando os tempos de execução das duas implementações, podemos observar que a função qsort() é mais eficiente do que a função my_sort(), uma vez que a qsort() é otimizada e implementada em nível de sistema operacional.